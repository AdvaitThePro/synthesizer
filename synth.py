"""
Sample waveform synthesizer.
Creates some simple waveform samples with adjustable parameters.

Written by Irmen de Jong (irmen@razorvine.net) - License: MIT open-source.
"""
from rhythmbox import Sample
from math import sin, pi, floor
import random
import array

__all__ = ["key_freq", "Wavesynth"]


def key_freq(key_number, a4=440.0):
    """
    Return the note frequency for the given piano key number.
    C4 is key 40 and A4 is key 49 (=440 hz).
    https://en.wikipedia.org/wiki/Piano_key_frequencies
    """
    return 2**((key_number-49)/12) * a4


class Wavesynth:
    """
    Waveform sample synthesizer. Can generate various wave forms based on mathematic functions:
    sine, square (perfect or with harmonics), triangle, sawtooth (perfect or with harmonics),
    variable harmonics, white noise.  It also supports an optional LFO for Frequency Modulation.
    """
    def __init__(self, samplerate=Sample.norm_samplerate, samplewidth=Sample.norm_sampwidth):
        if samplewidth not in (1, 2, 4):
            raise ValueError("only samplewidth sizes 1, 2 and 4 are supported")
        self.samplerate = samplerate
        self.samplewidth = samplewidth
        self.oscillator = Oscillator(self.samplerate)

    def _get_array(self):
        if self.samplewidth == 1:
            return array.array('b')
        elif self.samplewidth == 2:
            return array.array('h')
        elif self.samplewidth == 4:
            return array.array('l')
        else:
            raise ValueError("only samplewidth sizes 1, 2 and 4 are supported")

    def to_sample(self, sample_array, fadeout=True):
        s = Sample.from_array(sample_array, self.samplerate, 1)
        return s.fadeout(0.1 if fadeout else 0)

    def sine(self, frequency, duration, amplitude=1.0, phase=0.0, bias=0.0, fmlfo=None):
        """Simple sine wave. Optional FM using a supplied LFO."""
        assert 0 <= amplitude <= 1.0
        assert -1 <= bias <= 1.0
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.sine(frequency, amplitude, phase, bias, fmlfo=fmlfo)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples

    def square(self, frequency, duration, amplitude=0.8, phase=0.0, bias=0.0, fmlfo=None):
        """
        Generate a perfect square wave [max/-max].
        It is fast, but the square wave is not as 'natural' sounding as the ones
        generated by the square_h function (which is based on harmonics).
        """
        assert 0 <= amplitude <= 1.0
        assert -1 <= bias <= 1.0
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.square(frequency, amplitude, phase, bias, fmlfo=fmlfo)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples

    def square_h(self, frequency, duration, num_harmonics=12, amplitude=1.0, phase=0.0, bias=0.0, fmlfo=None):
        """Generate a square wave based on harmonic sine waves (more natural sounding than pure square)"""
        assert 0 <= amplitude <= 1.0
        assert -1 <= bias <= 1.0
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.square_h(frequency, num_harmonics, amplitude, phase, bias, fmlfo=fmlfo)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples

    def triangle(self, frequency, duration, amplitude=1.0, phase=0.0, bias=0.0, fmlfo=None):
        """Perfect triangle waveform (not using harmonics). Optional FM using a supplied LFO."""
        assert 0 <= amplitude <= 1.0
        assert -1 <= bias <= 1.0
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.triangle(frequency, amplitude, phase, bias, fmlfo=fmlfo)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples

    def sawtooth(self, frequency, duration, amplitude=0.8, phase=0.0, bias=0.0, fmlfo=None):
        """Perfect sawtooth waveform (not using harmonics)."""
        assert 0 <= amplitude <= 1.0
        assert -1 <= bias <= 1.0
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.sawtooth(frequency, amplitude, phase, bias, fmlfo=fmlfo)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples

    def sawtooth_h(self, frequency, duration, num_harmonics=12, amplitude=0.8, phase=0.0, bias=0.0, fmlfo=None):
        """Sawtooth waveform based on harmonic sine waves"""
        assert 0 <= amplitude <= 1.0
        assert -1 <= bias <= 1.0
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.sawtooth_h(frequency, num_harmonics, amplitude, phase, bias, fmlfo=fmlfo)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples

    def pulse(self, frequency, duration, amplitude=0.8, phase=0.0, bias=0.0, pulsewidth=0.1, fmlfo=None, pwlfo=None):
        """
        Perfect pulse waveform (not using harmonics).
        Optional FM and/or Pulse-width modulation. If you use PWM, pulsewidth is ignored.
        """
        assert 0 <= amplitude <= 1.0
        assert -1 <= bias <= 1.0
        assert 0 < pulsewidth <= 0.5
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.pulse(frequency, amplitude, phase, bias, pulsewidth, fmlfo=fmlfo, pwlfo=pwlfo)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples

    def harmonics(self, frequency, duration, num_harmonics, amplitude=1.0, phase=0.0, bias=0.0, only_even=False, only_odd=False, fmlfo=None):
        """Makes a waveform based on harmonics. This is slow because many sine waves are added together."""
        assert 0 <= amplitude <= 1.0
        assert -1 <= bias <= 1.0
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.harmonics(frequency, num_harmonics, amplitude, phase, bias, only_even=only_even, only_odd=only_odd, fmlfo=fmlfo)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples

    def white_noise(self, duration, amplitude=1.0, bias=0.0):
        """White noise (randomness) waveform."""
        assert 0 <= amplitude <= 1.0
        assert -1 <= bias <= 1.0
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.white_noise(amplitude, bias)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples

    def constant(self, duration, bias=0.0):
        """Flat constant-value waveform."""
        assert -1 <= bias <= 1.0
        samples = self._get_array()
        scale = 2**(self.samplewidth*8-1)-1
        waveform = self.oscillator.constant(bias)
        for _ in range(int(duration*self.samplerate)):
            samples.append(int(next(waveform)*scale))
        return samples


class Oscillator:
    """
    Oscillator that provides generators for several types of waveforms.
    You can also apply FM to an osc, and/or an ADSR envelope.
    """
    def __init__(self, samplerate=Sample.norm_samplerate):
        self.samplerate = samplerate

    def sine(self, frequency, amplitude=1.0, phase=0.0, bias=0.0, fmlfo=None):
        """Returns a generator that produces a sine wave. Optionally applies a FM LFO."""
        if fmlfo:
            # The FM compensates for the phase change by means of phase_correction.
            # See http://stackoverflow.com/questions/3089832/sine-wave-glissando-from-one-pitch-to-another-in-numpy
            # and http://stackoverflow.com/questions/28185219/generating-vibrato-sine-wave
            phase_correction = phase*2*pi
            freq_previous = frequency
            increment = 2*pi/self.samplerate
            t = 0
            while True:
                freq = frequency*(1+next(fmlfo))
                phase_correction += (freq_previous-freq)*t
                freq_previous = freq
                yield sin(t*freq+phase_correction)*amplitude+bias
                t += increment
        else:
            # optimized loop without FM
            rate = self.samplerate/frequency
            increment = 2*pi/rate
            t = phase*2*pi
            while True:
                yield sin(t)*amplitude+bias
                t += increment

    def triangle(self, frequency, amplitude=1.0, phase=0.0, bias=0.0, fmlfo=None):
        """Returns a generator that produces a perfect triangle wave (not using harmonics)."""
        if fmlfo:
            phase_correction = phase
            freq_previous = frequency
            increment = 1/self.samplerate
            t = 0
            while True:
                freq = frequency * (1+next(fmlfo))
                phase_correction += (freq_previous-freq)*t
                freq_previous = freq
                tt = t*freq+phase_correction
                yield 4*amplitude*(abs((tt+0.75) % 1 - 0.5)-0.25)+bias
                t += increment
        else:
            # optimized loop without FM
            t = phase/frequency
            increment = 1/self.samplerate
            while True:
                yield 4*amplitude*(abs((t*frequency+0.75) % 1 - 0.5)-0.25)+bias
                t += increment

    def square(self, frequency, amplitude=1.0, phase=0.0, bias=0.0, fmlfo=None):
        """Returns a generator that produces a perfect square wave [max/-max] (not using harmonics)."""
        if fmlfo:
            phase_correction = phase
            freq_previous = frequency
            increment = 1/self.samplerate
            t = 0
            while True:
                freq = frequency*(1+next(fmlfo))
                phase_correction += (freq_previous-freq)*t
                freq_previous = freq
                tt = t*freq + phase_correction
                yield (-amplitude if int(tt*2) % 2 else amplitude)+bias
                t += increment
        else:
            # optimized loop without FM
            t = phase/frequency
            increment = 1/self.samplerate
            while True:
                yield (-amplitude if int(t*frequency*2) % 2 else amplitude)+bias
                t += increment

    def square_h(self, frequency, num_harmonics=12, amplitude=1.0, phase=0.0, bias=0.0, fmlfo=None):
        """
        Returns a generator that produces a square wave based on harmonic sine waves.
        It is a lot heavier to generate than square because it has to add many individual sine waves.
        It's done by adding only odd-integer harmonics, see https://en.wikipedia.org/wiki/Square_wave
        """
        return self.harmonics(frequency, num_harmonics, amplitude, phase, bias, only_odd=True, fmlfo=fmlfo)

    def sawtooth(self, frequency, amplitude=1.0, phase=0.0, bias=0.0, fmlfo=None):
        """Returns a generator that produces a perfect sawtooth waveform (not using harmonics)."""
        if fmlfo:
            increment = 1/self.samplerate
            freq_previous = frequency
            phase_correction = phase
            t = 0
            while True:
                freq = frequency*(1+next(fmlfo))
                phase_correction += (freq_previous-freq)*t
                freq_previous = freq
                tt = t*freq + phase_correction
                yield bias+amplitude*2*(tt - floor(0.5+tt))
                t += increment
        else:
            # optimized loop without FM
            t = phase/frequency
            increment = 1/self.samplerate
            while True:
                tt = t*frequency
                yield bias+amplitude*2*(tt - floor(0.5+tt))
                t += increment

    def sawtooth_h(self, frequency, num_harmonics=12, amplitude=1.0, phase=0.0, bias=0.0, fmlfo=None):
        """
        Returns a generator that produces a sawtooth wave based on harmonic sine waves.
        It is a lot heavier to generate than square because it has to add many individual sine waves.
        It's done by adding all harmonics, see https://en.wikipedia.org/wiki/Sawtooth_wave
        """
        for y in self.harmonics(frequency, num_harmonics, amplitude, phase+0.5, bias, fmlfo=fmlfo):
            yield bias-y+bias

    def pulse(self, frequency, amplitude=1.0, phase=0.0, bias=0.0, pulsewidth=0.1, fmlfo=None, pwlfo=None):
        """
        Returns a generator that produces a perfect pulse waveform (not using harmonics).
        Optional FM and/or Pulse-width modulation. If you use PWM, pulsewidth is ignored.
        """
        assert 0 < pulsewidth <= 0.5
        pwlfo = pwlfo or iter(int, 1)   # endless zeros if no pwm
        if fmlfo:
            increment = 1/self.samplerate
            freq_previous = frequency
            phase_correction = phase
            t = 0
            while True:
                pw = pulsewidth * (1+next(pwlfo))
                freq = frequency*(1+next(fmlfo))
                phase_correction += (freq_previous-freq)*t
                freq_previous = freq
                tt = t*freq+phase_correction
                yield (amplitude if tt % 1 < pw else -amplitude)+bias
                t += increment
        else:
            # optimized loop without FM
            t = phase/frequency
            increment = 1/self.samplerate
            while True:
                pw = pulsewidth * (1+next(pwlfo))
                yield (amplitude if t*frequency % 1 < pw else -amplitude)+bias
                t += increment

    def harmonics(self, frequency, num_harmonics, amplitude=1.0, phase=0.0, bias=0.0, only_even=False, only_odd=False, fmlfo=None):
        """
        Returns a generator that produces a waveform based on harmonics.
        This is computationally intensive because many sine waves are added together.
        """
        fmlfo = fmlfo or iter(int, 1)   # endless zeros if no fmlfo provided
        increment = 2*pi/self.samplerate
        phase_correction = phase*2*pi
        freq_previous = frequency
        t = 0
        while True:
            h = 0.0
            freq = frequency*(1+next(fmlfo))
            phase_correction += (freq_previous-freq)*t
            freq_previous = freq
            q = t*freq + phase_correction
            if only_odd:
                for k in range(1, 2*num_harmonics, 2):
                    h += sin(q*k)/k
            elif only_even:
                h += sin(q)*0.7  # always include harmonic #1 as base
                for k in range(2, 2*num_harmonics, 2):
                    h += sin(q*k)/k
            else:
                for k in range(1, 1+num_harmonics):
                    h += sin(q*k)/k/2
            yield h*amplitude + bias
            t += increment

    def white_noise(self, amplitude=1.0, bias=0.0):
        """Returns a generator that produces white noise (randomness) waveform."""
        while True:
            yield random.uniform(-amplitude, amplitude) + bias

    def constant(self, bias=0.0):
        """Returns a generator that produces a single constant flat value."""
        while True:
            yield bias

    def envelope(self, oscillator, attack, decay, sustain, sustain_level, release, stop_at_end=False, cycle=False):
        """
        Returns the oscillator with an ADSR volume envelope applied to it.
        A,D,S,R are in seconds, sustain_level is an amplitude factor.
        """
        assert attack >= 0 and decay >= 0 and sustain >= 0 and release >= 0
        assert 0 <= sustain_level <= 1
        while True:
            time = 0.0
            end_time_decay = attack + decay
            end_time_sustain = end_time_decay + sustain
            end_time_release = end_time_sustain + release
            increment = 1/self.samplerate
            if attack:
                amp_change = 1/attack*increment
                amp = 0.0
                while time < attack:
                    yield next(oscillator)*amp
                    amp += amp_change
                    time += increment
            if decay:
                amp = 1.0
                amp_change = (sustain_level-1)/decay*increment
                while time < end_time_decay:
                    yield next(oscillator)*amp
                    amp += amp_change
                    time += increment
            while time < end_time_sustain:
                yield next(oscillator)*sustain_level
                time += increment
            if release:
                amp = sustain_level
                amp_change = (-sustain_level)/release*increment
                while time < end_time_release:
                    yield next(oscillator)*amp
                    amp += amp_change
                    time += increment
                if amp > 0:
                    yield next(oscillator)*amp
            if not cycle:
                break
        if not stop_at_end:
            while True:
                yield 0.0
